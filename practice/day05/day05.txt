一.定位页面元素的方法2
1.android_uiautomator定位:只能针对Android系统来使用,不能对iOS使用
2.uiautomator是谷歌在Android系统上提供的一套用于做UI自动化测试的框架,Appium就是通过这套框架来实现Android设备里元素的操作的
3.uiautomator框架里提供了大量的API来对元素做操作,其中UiSelector类专门用于查询定位元素,而MobileBy类里所提供的android_uiautomator定位方法就是使用UiSelector类来定位元素
4.UiSelector类里提供了大量的定位元素的函数,使用这些定位函数的语法规则有两种写法:
(1)new UiSelector().定位方法("参数数据")
(2)定位方法("参数数据")
注意:参数数据是str时,必须使用双引号来表示,不能使用单引号
5.UiSelector类里常用的定位方法:
(1)text方法:参数是元素的text属性值,字符串精确匹配(字符串相等才能匹配上),所以参数必须书写的是完整字符串
示例:
n7=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'text("7")')
(2)textContains方法:参数是text属性值的一部分字符串,只要目标元素text属性值包含参数值,就可以定位到,是模糊匹配的一种定位方法
示例:
d=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'textContains("e")')

案例：ContactManager，复选框


(3)textStartsWith方法:参数是text属性值的开头部分,当目标元素的text属性值以参数值开头时,就会被定位到,是模糊匹配的另一种定位方法
示例:
d=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'textStartsWith("d")')
(4)textMatches方法:参数要求是正则表达式,只要text属性值匹配参数正则表达式,就会被定位到,是模糊匹配的高级用法---了解！
说明:正则表达式用于描述字符串的规则,例如.*在正则表达式里代表任意多个除换行符以外的字符,所以.*e.*代表包含e字符
示例:
d=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'textMatches(".*e.*")')
d=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'textMatches("^d.*l$")')

注意:对于文本框来说,text属性值会随着文本框的清空或输入操作而变化,所以尽量不要使用text或textContains,textStartsWith,textMatches等方法来定位

练习:新建demo5003.py,启动MyAppDemo2,使用text属性值定位OK,点击它,使用textContains包含"igg"定位bigger按钮,点击它,等待2秒,关闭App

(5)description方法:参数是content-desc属性值,是精确匹配(必须相等)
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'description("等于")')
(6)descriptionContains方法:参数是content-desc属性值中的一部分内容,是模糊匹配,只要包含就可以定位到
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'descriptionContains("于")')
(7)descriptionStartsWith方法:参数是content-desc属性值中开头部分,是模糊匹配,只要以参数开头就可以定位到
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'descriptionStartsWith("等")')
(8)descriptionMatches方法:参数是正则表达式,是模糊匹配,只要content-desc属性值匹配该正则表达式就可以定位到
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'descriptionMatches("^等.*")')

练习:新建demo5003.py,启动ContactManager,使用descriptionContains包含"visi"来定位复选框,点击它,使用descriptionStartsWith以Add开头来定位按钮,点击它,等待2秒,关闭App

(9)resourceId方法:参数是完整的resource-id属性值,是精确匹配(必须相等)
注意:不能省略/和它之前的部分
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'resourceId("com.android.calculator2:id/eq")')
(10)resourceIdMatches方法:参数是正则表达式,只要resource-id属性值匹配参数的正则表达式,就可以定位到
注意:没有resourceIdContains和resourceIdStartsWith两个方法
示例:
dh=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'resourceIdMatches(".*eq.*")')

练习:复制demo5002.py为demo5004.py,删除启动和关闭App之间的步骤,书写代码实现使用resourceId定位到文本框,清空后输入abcde,使用resourceId定位到OK按钮,点击它,使用resourceIdMatches匹配.*big.*来定位Bigger按钮,点击它,等待2秒,关闭App

(11)className方法:参数是class属性值,精确匹配
示例:
fxk=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'className("android.widget.CheckBox")')
(12)classNameMatches方法:参数是正则表达式,只要class属性值匹配该正则表达式,就可以定位到,是模糊匹配
示例:
an=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'classNameMatches(".*Button.*")')

6.UiSelector里的多个定位方法组合:使用链式写法,多个定位方法之间使用一个点(.)分隔
示例1:
fxk=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'className("android.widget.CheckBox").descriptionContains("visi")')
示例2:
n2=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'classNameMatches(".*Button.*").text("2")')
7.索引号:默认uiautomator定位也是获得满足条件的第一个元素,如果想要获得其他元素,可以使用索引号的定位条件,放在其他定位条件后面,有两种定位关键字
(1)index:同父节点下兄弟中的索引号,从0开始,参数是一个整数,不是字符串
示例:
n9=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'classNameMatches(".*Button.*").index(2)')
(2)instance:同布局(Layout)节点下兄弟中的索引号,从0开始,参数是一个整数,不是字符串
示例:
cheng=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'classNameMatches(".*Button.*").instance(14)')

练习：新建demo5004,启动ContactManager，点击按钮，向第一个文本框输入a，向第二个文本框输入b，向第三个文本框输入c，等待3秒，关闭该App。
要求：使用uiautomator里的索引号来查找定位这些文本框类型的元素。



8.嵌套关系定位---高级用法,了解!
(1)childSelector:通过父节点查找子节点
示例:
chu=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'resourceId("com.android.calculator2:id/pad_operator").childSelector(description("除"))')
(2)fromParent:通过兄弟节点查找
示例:
n4=driver.find_element(MobileBy.ANDROID_UIAUTOMATOR,'text("6").fromParent(text("4"))')


